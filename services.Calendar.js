/**
 * @file services.Calendar.js
 * @description L·ªõp d·ªãch v·ª• qu·∫£n l√Ω t·∫•t c·∫£ c√°c t∆∞∆°ng t√°c v·ªõi Google Calendar.
 * Bao g·ªìm logic t·ª± ƒë·ªông t·∫°o v√† ph·ª•c h·ªìi (self-healing) cho Calendar.
 */

class CalendarService {
  /**
   * L·∫•y v·ªÅ ƒë·ªëi t∆∞·ª£ng Calendar ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng.
   * ƒê√¢y l√† h√†m c·ªët l√µi c·ªßa logic "T·ª± ph·ª•c h·ªìi".
   * @private
   * @returns {GoogleAppsScript.Calendar.Calendar} ƒê·ªëi t∆∞·ª£ng Calendar h·ª£p l·ªá.
   */
  static _getCalendar() {
    const properties = PropertiesService.getScriptProperties();
    const calendarId = properties.getProperty(SCRIPT_PROPERTIES_KEYS.CALENDAR_ID);

    if (calendarId) {
      try {
        const calendar = CalendarApp.getCalendarById(calendarId);
        // Th·ª≠ m·ªôt h√†nh ƒë·ªông nh·ªè ƒë·ªÉ ch·∫Øc ch·∫Øn c√≥ quy·ªÅn truy c·∫≠p
        calendar.getName(); 
        Logger.log(`CalendarService: ƒê√£ truy c·∫≠p th√†nh c√¥ng Calendar ID: ${calendarId}`);
        return calendar;
      } catch (e) {
        Logger.log(`CalendarService: L·ªñI - Kh√¥ng th·ªÉ truy c·∫≠p Calendar ID ${calendarId}. L·ªói: ${e.message}. S·∫Ω t·∫°o calendar m·ªõi.`);
      }
    }

    // N·∫øu kh√¥ng c√≥ ID ho·∫∑c truy c·∫≠p l·ªói, t·∫°o calendar m·ªõi
    Logger.log('CalendarService: ƒêang t·∫°o Google Calendar m·ªõi...');
    const newCalendar = CalendarApp.createCalendar('L·ªãch H·ªçc LHU [T·ª± ƒë·ªông]');
    const newId = newCalendar.getId();
    properties.setProperty(SCRIPT_PROPERTIES_KEYS.CALENDAR_ID, newId);
    Logger.log(`CalendarService: ƒê√£ t·∫°o v√† l∆∞u Calendar m·ªõi v·ªõi ID: ${newId}`);
    return newCalendar;
  }
  
  /**
   * X√¢y d·ª±ng chi ti·∫øt s·ª± ki·ªán (ti√™u ƒë·ªÅ, m√¥ t·∫£, link check-in) t·ª´ d·ªØ li·ªáu th√¥.
   * @private
   * @param {object} eventData - D·ªØ li·ªáu c·ªßa m·ªôt bu·ªïi h·ªçc t·ª´ Sheet.
   * @returns {{title: string, options: object}} - Ti√™u ƒë·ªÅ v√† c√°c t√πy ch·ªçn cho s·ª± ki·ªán.
   */
  static _buildEventDetails(eventData) {
    const webAppUrl = ScriptApp.getService().getUrl();
    // Ch√®n eventHash v√†o link ƒë·ªÉ backend c√≥ th·ªÉ t√¨m l·∫°i s·ª± ki·ªán trong sheet
    const checkinLink = `${webAppUrl}?page=checkin&hash=${eventData.eventHash}`;
    
    const title = `[${eventData.TenPhong}] ${eventData.TenMonHoc}`;
    const loaiBuoi = eventData.Type === 0 ? 'L√Ω thuy·∫øt' : 'Th·ª±c h√†nh';
    
    const description = `--- CHI TI·∫æT BU·ªîI H·ªåC ---
M√¥n h·ªçc: ${eventData.TenMonHoc}
L·ªõp h·ªçc ph·∫ßn: ${eventData.TenNhom}
Gi√°o vi√™n: ${eventData.GiaoVien}

ƒê·ªãa ƒëi·ªÉm: ${eventData.TenPhong} (${eventData.TenCoSo})
Lo·∫°i: ${loaiBuoi}

--- T∆Ø∆†NG T√ÅC ---
‚û°Ô∏è Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ Check-in: ${checkinLink}
--- THAM KH·∫¢O ---
‚û°Ô∏è Xem l·ªãch g·ªëc c·ªßa tr∆∞·ªùng: ${OFFICIAL_SCHEDULE_URL}`
    
    return {
      title,
      options: { description: description.trim() },
    };
  }

  /**
   * T·∫°o m·ªôt lo·∫°t s·ª± ki·ªán tr√™n Google Calendar t·ª´ d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p.
   * @param {Object[]} eventsData - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng s·ª± ki·ªán ƒë·ªçc t·ª´ Sheet.
   * @returns {Object[]} M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng ch·ª©a { eventHash, newEventId } ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i v√†o Sheet.
   */
  static createEventsInBatch(eventsData) {
    if (!eventsData || eventsData.length === 0) {
      return [];
    }
    const calendar = this._getCalendar();
    const updatesForSheet = [];

    Logger.log(`CalendarService: B·∫Øt ƒë·∫ßu t·∫°o ${eventsData.length} s·ª± ki·ªán...`);

    for (const eventData of eventsData) {
      try {
        const startTime = new Date(eventData.ThoiGianBD);
        const endTime = new Date(eventData.ThoiGianKT);

        // B·ªè qua c√°c s·ª± ki·ªán c√≥ th·ªùi gian kh√¥ng h·ª£p l·ªá
        if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
          Logger.log(`L·ªói: Th·ªùi gian kh√¥ng h·ª£p l·ªá cho s·ª± ki·ªán ${eventData.TenMonHoc}. B·ªè qua.`);
          continue;
        }

        const { title, options } = this._buildEventDetails(eventData);
        const newEvent = calendar.createEvent(title, startTime, endTime, options);
        
        updatesForSheet.push({
          eventHash: eventData.eventHash,
          newEventId: newEvent.getId(),
        });
        
        Logger.log(`‚úÖ ƒê√£ t·∫°o: ${title}`);
        Utilities.sleep(500); // T·∫°m ngh·ªâ 0.5 gi√¢y ƒë·ªÉ tr√°nh v∆∞·ª£t gi·ªõi h·∫°n API
      } catch (e) {
        Logger.log(`‚ùå L·ªói khi t·∫°o s·ª± ki·ªán cho m√¥n '${eventData.TenMonHoc}': ${e.message}`);
      }
    }
    
    Logger.log(`CalendarService: Ho√†n t·∫•t t·∫°o s·ª± ki·ªán. Th√†nh c√¥ng: ${updatesForSheet.length}/${eventsData.length}.`);
    return updatesForSheet;
  }

  /**
   * X√≥a t·∫•t c·∫£ c√°c s·ª± ki·ªán c·ªßa h·ªá th·ªëng d·ª±a tr√™n danh s√°ch eventId.
   * D√πng cho ch·ª©c nƒÉng "Reset an to√†n".
   * @param {string[]} eventIds - M·∫£ng c√°c googleCalendarEventId c·∫ßn x√≥a.
   */
  static clearSystemEvents(eventIds) {
    if (!eventIds || eventIds.length === 0) return;
    const calendar = this._getCalendar();
    Logger.log(`CalendarService: B·∫Øt ƒë·∫ßu x√≥a ${eventIds.length} s·ª± ki·ªán h·ªá th·ªëng...`);

    for (const eventId of eventIds) {
      if (!eventId) continue;
      try {
        const event = calendar.getEventById(eventId);
        if (event) {
          event.deleteEvent();
          Logger.log(`üóëÔ∏è ƒê√£ x√≥a s·ª± ki·ªán ID: ${eventId}`);
          Utilities.sleep(300); // T·∫°m ngh·ªâ 0.3 gi√¢y
        }
      } catch (e) {
        // B·ªè qua l·ªói n·∫øu s·ª± ki·ªán kh√¥ng t·ªìn t·∫°i (c√≥ th·ªÉ ƒë√£ b·ªã x√≥a th·ªß c√¥ng)
        Logger.log(`L·ªói nh·ªè khi x√≥a s·ª± ki·ªán ID ${eventId} (c√≥ th·ªÉ ƒë√£ b·ªã x√≥a): ${e.message}`);
      }
    }
    Logger.log('CalendarService: Ho√†n t·∫•t x√≥a s·ª± ki·ªán h·ªá th·ªëng.');
  }

  /**
   * X√≥a to√†n b·ªô calendar v√† t·∫°o l·∫°i m·ªôt c√°i m·ªõi.
   * D√πng cho ch·ª©c nƒÉng "Reset nhanh".
   */
  static deleteAndRecreateCalendar() {
    const properties = PropertiesService.getScriptProperties();
    const calendarId = properties.getProperty(SCRIPT_PROPERTIES_KEYS.CALENDAR_ID);

    if (calendarId) {
      try {
        const calendar = CalendarApp.getCalendarById(calendarId);
        calendar.deleteCalendar();
        Logger.log(`CalendarService: ƒê√£ x√≥a th√†nh c√¥ng Calendar c≈© ID: ${calendarId}`);
      } catch (e) {
        Logger.log(`CalendarService: L·ªói khi x√≥a Calendar c≈© ID ${calendarId}: ${e.message}`);
      }
    }
    
    // X√≥a ID c≈© v√† ƒë·ªÉ h√†m _getCalendar() t·ª± t·∫°o c√°i m·ªõi
    properties.deleteProperty(SCRIPT_PROPERTIES_KEYS.CALENDAR_ID);
    Logger.log('CalendarService: ƒêang y√™u c·∫ßu t·∫°o Calendar m·ªõi...');
    this._getCalendar(); // G·ªçi h√†m n√†y ƒë·ªÉ k√≠ch ho·∫°t vi·ªác t·∫°o m·ªõi v√† l∆∞u ID
  }
}